using System;
using System.Collections.Generic;
using UnityEngine.EventSystems;

namespace UnityEngine.XR.iOS
{
	public class UnityARHitTestExample : MonoBehaviour
	{
		public GameObject playerPrefab;
		public Transform m_HitTransform;
		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
		private bool isDetecting;

        bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
        {
            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
            if (hitResults.Count > 0) {
	            GameObject previousObject = GameObject.FindWithTag(this.playerPrefab.name);
	            if (previousObject != null)
	            {
		            foreach (var hitResult in hitResults)
		            {
			            previousObject.transform.position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);
			            previousObject.transform.rotation = UnityARMatrixOps.GetRotation(hitResult.worldTransform);
			            return true;
		            }
	            }
	            else
	            {
		            GameObject go = PhotonNetwork.Instantiate(this.playerPrefab.name, new Vector3(0, 0, 0), Quaternion.identity, 0);
		            foreach (var hitResult in hitResults) {
			            Debug.Log ("Got hit!");
			            go.transform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
			            go.transform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
			            return true;
		            }
	            }

            }
            return false;
        }

		public void Start()
		{
			isDetecting = true;
		}

		public void DetectionOff()
		{
			isDetecting = false;
		}
		
		// Update is called once per frame
		void Update () {
			#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
			if (Input.GetMouseButtonDown (0))
			{				
				Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
				RaycastHit hit;
				
				//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
				//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
				if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer))
				{
					GameObject previousObject = GameObject.FindWithTag(this.playerPrefab.name);
					if (previousObject != null)
					{
						Debug.Log(hit.point);
						previousObject.transform.position = hit.point;
						previousObject.transform.rotation = hit.transform.rotation;
					}
					else
					{
						GameObject go = PhotonNetwork.Instantiate(this.playerPrefab.name, new Vector3(0, 0, 0), Quaternion.identity, 0);
						go.transform.position = hit.point;
						go.transform.rotation = hit.transform.rotation;
					}
				}

//				isDetecting = false;
			}
			#else
			if (Input.touchCount > 0 && playerPrefab != null)
			{
				var touch = Input.GetTouch(0);
				if ((touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved))
				{
					var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
					ARPoint point = new ARPoint {
						x = screenPosition.x,
						y = screenPosition.y
					};

                    // prioritize reults types
                    ARHitTestResultType[] resultTypes = {
                        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
                        // if you want to use infinite planes use this:
                       // ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                        //ARHitTestResultType.ARHitTestResultTypeHorizontalPlane, 
                        // ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                    }; 
					
                    foreach (ARHitTestResultType resultType in resultTypes)
                    {
                        if (HitTestWithResultType (point, resultType))
                        {
                            return;
                        }
                    }
//				isDetecting = false;
				}
			}
			#endif
		}
	}
}

